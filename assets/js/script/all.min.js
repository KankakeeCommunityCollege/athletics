// DO NOT PLACE IN A DOCUMENT READY FUNTION - it will break

// Main Athletics carousel
$('.heroSlider').slick({
  dots: true,
  slidesToShow: 1,
  slidesToScroll: 1,
  autoplay: true,
  autoplaySpeed: 3000,
  prevArrow:'<img alt="" class="a-left control-c prev slick-prev" src="assets/img/dbl-prev.svg">',
  nextArrow:'<img alt="" class="a-right control-c next slick-next" src="assets/img/dbl-next.svg">'
});
// Baseball carousel
$('.baseballSlider').slick({
  dots: true,
  slidesToShow: 1,
  slidesToScroll: 1,
  autoplay: true,
  autoplaySpeed: 3000,
  prevArrow:'<img alt="" class="a-left control-c prev slick-prev" src="../../assets/img/dbl-prev.svg">',
  nextArrow:'<img alt="" class="a-right control-c next slick-next" src="../../assets/img/dbl-next.svg">'
});

// Custom JavaScript to pull in YouTube playlist:
var Youtube_carousel = (function youtube_carousel_module(){

  var $apiK = $('meta[name=yt-api-k]').attr('value'),
    $ytList = $('#yt_list'),
    $ytPlayer = $('#yt_player'),
    // To use on a different site repalce baseUrl's value with the desired site URL
    // (e.g. var baseUrl = 'https://foundation.kcc.edu';)
    baseUrl = 'https://athletics.kcc.edu'; // The base site used to call assets (e.g. images)

  function init(){
    var default_user_name = 'KankakeeCommCollege';
    selectChannel(default_user_name);
  }

  function selectChannel(user_name) {
    $.ajax({
      url: 'https://www.googleapis.com/youtube/v3/channels',
      type: 'GET',
      dataType: 'json',
      data: {
        part: 'contentDetails',
        forUsername: user_name,
        key: $apiK
      },
      success: function (d) {
        $ytList.html('');
        if (d.pageInfo.totalResults > 0) {
          for (var _i = 0, _a = d.items; _i < _a.length; _i++) {
            var item = _a[_i];
            var uploads = 'PLEnNvZd4X-lVSveRGpbsXLCmf7hYXX97q';
            getVideos(uploads);
          }
        }
        else {
          $('input#user_name').addClass('error');
          $('div#channel_input > .info')
            .show()
            .html('This user not exists');
        }
      },
      error: function (x) {
        console.dir(x);
      }
    });
  }
  function getVideos(yt_id, next_page) {
    if (next_page === void 0) { next_page = ''; }
    var limit = 8;
    var more = '';
    var xhr = $.ajax({
      url: 'https://www.googleapis.com/youtube/v3/playlistItems',
      type: 'GET',
      dataType: 'json',
      data: {
        part: 'snippet',
        playlistId: yt_id,
        maxResults: limit,
        pageToken: next_page,
        key: $apiK
      },
      success: function (data) {
        if (data.nextPageToken) {
          more = '';
        }
        if (next_page === '') {
          $ytPlayer.attr('src', 'https://youtube.com/embed/' +
                    data.items[0].snippet.resourceId.videoId +
                    '?controls=0&showinfo=0&rel=0');
        }
        for (var i = 0; i < limit; i++) {
          var title = $('<h3 class="video-carousel__title">').append(data.items[i].snippet.title),
            thumb = $('<img class="img-fluid" src="' + baseUrl +  '/assets/img/yt-loading.png">').attr('data-src', data.items[i].snippet.thumbnails.medium.url),
            video_id = data.items[i].snippet.resourceId.videoId,
            link = $('<a class="video-link" data-toggle="modal" data-target="#exampleModalCenter" href="#">')
              .data('videoid', video_id)
              .append(thumb),
            holder = $('<div class="item">').append(link, title);
          $ytList.append(holder);
        }
        $ytList.append(more);
        $ytList.slick({
          dots: false,
          infinite: false,
          autoplay: false,
          slidesToShow: 3,
          slidesToScroll: 1,
          adaptiveHeight: false,
          prevArrow:'<img class="a-left control-c prev slick-prev" src="' + baseUrl + '/assets/img/blue-prev.svg">',
          nextArrow:'<img class="a-right control-c next slick-next" src="' + baseUrl + '/assets/img/blue-next.svg">',
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToShow: 3,
                slidesToScroll: 3
              }
            },
            {
              breakpoint: 992,
              settings: {
                slidesToShow: 1,
                slidesToScroll: 1
              }
            },
          ]
        });
        lzFunction();   // Lazy load function
      }
    });
  }
  /* load more */
  $ytList.on('click', '#load-more', function () {
    $(this)
      .animate({
        'transform': 'scaleX(4)',
        'opacity': '0.1'
      }, function () {
        var that = $(this);
        getVideos(that.data('yt-id'), that.data('next-page'));
        that.remove();
      });
  });
  /* embeds */
  $ytList.on('click', 'a.video-link', function () {
    var video_id = $(this).data('videoid');
    $ytPlayer.attr(
      'src',
      'https://youtube.com/embed/' +
      video_id +
      '?controls=0&showinfo=0&rel=0&autoplay=1'
    );
  });

  $('#exampleModalCenter').on('hide.bs.modal', function (e) {
    var video_id = $(this).data('videoid');
    var leg=$ytPlayer.attr(
      'src',
      'https://youtube.com/embed/' +
      video_id +
      '?controls=0&showinfo=0&rel=0&autoplay=0');
    $ytPlayer.attr('src',leg);
  });

  return {
    init: init
  };

})();

// Lazy load function
// ex. <img data-src="/path/to/image.jpg" alt="">
function lzFunction(){
  (function() {
    [].forEach.call(document.querySelectorAll('img[data-src]'), function(img) {
      img.setAttribute('src', img.getAttribute('data-src'));
      img.onload = function() {
        img.removeAttribute('data-src');
      };
    });
  })();
}

$(document).ready(function() {
  function moreClick() {
    var trigger = $('.js-more-btn');

    trigger.click(function() {
      var that = $(this);

      if ( that.html() == 'More ...' ) {
        console.log("It's More");
        that.html('Close');
      } else {
        console.log("It's Less");
        that.html('More ...');
      }
    });
  }
  moreClick();
});

$(document).ready(function() {
  Youtube_carousel.init();
});

document.addEventListener('DOMContentLoaded', function() {
  // Define some deferred variables of things to do later.
  var deferSpreadsheetTable = $.Deferred(),
    deferSearchForm = $.Deferred();
  var currentUrl = window.location.href,  // Defin currentUrl as the user's current browser URL
    noProto = currentUrl.replace(/(^\w+:|^)\/\//, ''),  // Remove the http(s):// protocol from that URL
    url = setSheetUrl(url);  // Define the variable url as: the function setSheetUrl() and passing the variable url through it.
    //console.log(noProto);
  var monthNames = [ // Define an array of the months to convert JS # value of month into short text version
    'Jan.', 'Feb.', 'Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec.'
  ];
  // Once deferSpreadsheetTable is resolved, do this function:
  $.when(deferSpreadsheetTable).done(function() {
    // Unleash the DataTables JS library for functional/sortable tables:
    // (found at datatables.net)
    $('#Data').DataTable( {
      responsive: true, // Activate responsive powers GO!
      paging: false, // Don't paginate. Schedule schould all be on one page
      'order': [], // Initial column ordering
      'columnDefs': [ // Some column definitions:
        { 'orderData':[0], 'targets': [1] }, // Set the Date column's order data as the first column
        {
          'targets': [0],
          'visible': false, // Make the first column hidden
          'searchable': false // Exclude the first column from searching
        },
      ]
    } );
    deferSearchForm.resolve();  // Resolve the deferSearchForm deferrement
  });
  // Once deferSearchForm is resolved, do this function:
  $.when(deferSearchForm).done(function() {
    $('input[aria-controls="Data"]').attr('placeholder', 'Search Schedule...');  // Set the dataTable's search field placeholder as "Search Schedule"
  });
  // Function to set the url of the Google Sheet to use:
  function setSheetUrl(urlString) { // Pass the variable 'urlString' through
    var spreadsheetID = '13cd6P3Ze7bBJugzlQ2Uk2dFWc677wE68ghL94JZcnmI';  // ID of the Google Sheets Spreadsheet
    // Sheet # within the Spreadsheet
    // (Sheet # corresponds to the order of the sheets as they appear in Google--the left-most sheet being # '1')
    var sheetNumber; // Defined as an empty variable
    // Set the sheet # based on which page the user is on:
    if ( noProto.indexOf('/baseball') > -1 ) {
      sheetNumber = 1;  // If on Baseball Schedule page set to '1'
    } else if ( noProto.indexOf('/mens-basketball') > -1 ) {
      sheetNumber = 2;  // If on Men's Basketball Schedule page set to '2'
    } else if ( noProto.indexOf('/soccer') > -1 ) {
      sheetNumber = 3;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/womens-basketball') > -1 ) {
      sheetNumber = 4;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/softball') > -1 ) {
      sheetNumber = 5;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/volleyball') > -1 ) {
      sheetNumber = 6;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto == 'athletics.kcc.edu/' || noProto == 'localhost:3000/' ) {
      sheetNumber = 7;
    }
    // Make sure the Google Sheet is public or set to Anyone with link can view
    // Go to File > Publish
    urlString = 'https://spreadsheets.google.com/feeds/list/' + spreadsheetID + '/' + sheetNumber + '/public/values?alt=json'; // build the url
    return urlString; // Kick-out the urlString variable as the URL to the appropriate Sheet.
  }
  //console.log(url);
  // A function to build-out the HTML for the table...
  // pulling from the URL of the appropriate Google Sheet:
  function spreadsheetTable() {
    $.getJSON(url, function(data) {  // make JSON call to Google Data API
      var html = '';  // set html variable as empty string:
      // Funcrion to build the static table head:
      function buildTableHead() {
        html += '<table id="Data" class="display table table-striped table-hover" style="width:100%">';
        html += '<thead>';
        html += '<tr>';
        html += '<th class="all">Sort</th>'; // Invisible 'Sort' column
        html += '<th class="all">Date</th>'; // Display on all devices
        html += '<th class="min-tablet-l">Opponent</th>'; // Display on large tablets and up
        html += '<th class="all">Time</th>'; // Display on all devices
        html += '<th class="all">Where</th>'; // Display on all devices
        html += '<th class="desktop">Status</th>'; // Display on desktop and large devices only
        html += '<th class="desktop">Summary</th>'; // Display on desktop and large devices only
        html += '<th class="desktop">Record</th>';
        html += '</tr>';
        html += '</thead>';
        html += '<tbody>';
      }
      buildTableHead();
      // loop to build html output for each row (build the data into the table)
      var entry = data.feed.entry;  // Define 'entry' var from Google Sheet
      var wCount = 0,
        lCount = 0;
      entry.forEach(function(entry) { // Run a 'forEach()' loop on the entrys:
        // Set the background color for the first column in the table:
        function setColor(colorCode) { // Home games get a red background and away games get a blue background
          var red = '#c61f48',  // Define 'red' as the KCC Primary Red...
            blue = '#0f3b63';  // and 'blue' as the KCC Primary Blue hex-code.
          if ( entry['gsx$where']['$t'] == 'Home' ) {  // If the game location ('where' column) is Home:
            colorCode = red;  // Set the color to primary red
          } else {  // If not, then:
            colorCode = blue;  // Set the color to primary blue
          }
          return colorCode;  // Return the colorCodes out of the setColor() function
        }
        var color = setColor(entry);  // Define var 'color' as passing the var 'entry' through the setColor() function
        // Function to check if the game has an End date and build it out (for games that span multiple days e.g. tournaments & such.)
        function checkEndDate(endDateValue) {
          endDateValue = entry['gsx$end']['$t']; // Define the var 'endDate' as the data in the 'end' column of the Google Sheet
          if ( endDateValue !== '' ) {  // If an endDate exists (is not a blank cell in the sheet) then do this:
            var d = new Date(endDateValue), // Define following variables: Turn the date in the 'end' column into a JS date object
              m = monthNames[d.getMonth()], // Run that date through the monethNames[] array to get the Month in text
              day = d.getDate(); // Set 'day' as that day's #
            endDateValue = ' - ' + m + ' ' + day;  // Redefine 'endDate' as the month and date
          }
          return endDateValue; // Return the formated dates from the 'end' column out of the function
        }
        var endDate = checkEndDate(entry); // Define 'endDate' as running 'entry' through the checkEndDate() function
        // Function to check for a timezone and add it if there is not 'CST'.
        function checkForTimezone(timeZone) {
          timeZone = entry['gsx$timezone']['$t'];  // Define the var 'timeZone' as the data in the 'timezone' column of the Google Sheet
          if ( timeZone == '' || timeZone == 'CST' ) {  // If the timezone is empty or equal to 'CST' then do:
            timeZone = '';  // Set timezone as nothing
          } else {  // For everything else, do:
            timeZone = ' (' + timeZone + ')';  // Set timezone as the timezone value surrounded by parenthesis.
          }
          return timeZone; // Return the timezones out of the checkForTimezone() function
        }
        var timeZone = checkForTimezone(entry); // Define the var 'timeZone' as passing 'entry' through the checkForTimezone() function
        // Function to wrap the incoming data in HTML table markup:
        function buildTableRows() {
          var startDate = entry['gsx$start']['$t'];  // Define vars for: 'start' column
          var status = entry['gsx$status']['$t'];
          var d = new Date(startDate), // Define 'd' as a JS date object created from the dates in the 'start' column
            m = monthNames[d.getMonth()], // Define 'm' as the start date converted to text (e.g. Apr.) by running it throught he monthNames[] array
            day = d.getDate(), // Define 'day' as the date for the game
            sortingDate = d.getTime(); // Define 'sortingDate' as the JS getTime() values of the dates
          if ( status == 'W' ) {
            wCount += 1;
          } else if ( status == 'L' ) {
            lCount += 1;
          }
          html += '<tr>';  // Begin the row
          html += '<td>' + sortingDate + '</td>';  // Opponent Column
          html += '<td align="center" class="mx-auto" style="vertical-align:top;background-color:' + color + ';color:#ffffff;">' + m + ' ' + day + endDate + '</td>'; // Date Column: gets the appropriate background color and an end-date tacked-on if it exists.
          html += '<td align="left">' + entry['gsx$opponent']['$t'] + '</td>';  // Opponent Column
          html += '<td>' + entry['gsx$time']['$t'] + timeZone + '</td>';  // Time  Column: If there is a timezone other than CST, add the timezone in parenthesis
          html += '<td align="left">' + entry['gsx$where']['$t'] + '</td>';  // Where Column
          html += '<td class="schedule-page__align-center--offset" align="center">' + entry['gsx$status']['$t'] + '</td>';  // Status Column
          html += '<td class="schedule-page__align-center--offset" align="center">' + entry['gsx$summary']['$t'] + '</td>';  // Summary Column
          if ( status == 'W' || status == 'L' || status == 'Canceled' ) {
            html += '<td class="schedule-page__align-center--offset" align="center">' + wCount + ' - ' + lCount + '</td>';
          } else {
            html += '<td class="schedule-page__align-center--offset" align="center">' + ' ' + '</td>';
          }
          html += '</tr>'; // End the row
        }
        buildTableRows();
      });  // End of forEach loop
      // Tack on the closing table tags
      html += '</tbody>';
      html += '</table>';
      // output the html:
      $('#theTable').html(html);  // Inject the var 'html' into div w/ id="theTable".  (Var 'html' = string of text that makes up the table markup)
      deferSpreadsheetTable.resolve();  // Resolve the deferSpreadsheetTable deferrement
    });
  }
  //  A function that fires the spreadsheetTable() function IF the user is on a schedule page and fires the sliderSchedule() function if the user is on a sport's landing page:
  function checkPageLocation() {
    if ( noProto.indexOf('/schedule') > -1 ) {  // If user's current URL contains '/schedule' in it, do:
      spreadsheetTable();  // Go-go gadget spreadsheetTable()!
    }
  }
  checkPageLocation();  // Fire the nuclear missiles!
});

function documentLoading() {
  document.getElementById('page-top').addEventListener('load', loadingBar);
  function loadingBar() {
    document.getElementById('myMessage').innerHTML = 'LOADED';
  }
}
documentLoading();
document.addEventListener('DOMContentLoaded', function() {
  // Define some deferred variables of things to do later.
  var deferSlick = $.Deferred();
  var currentUrl = window.location.href,  // Defin currentUrl as the user's current browser URL
    noProto = currentUrl.replace(/(^\w+:|^)\/\//, ''),  // Remove the http(s):// protocol from that URL
    url = setSheetUrl(url);  // Define the variable url as: the function setSheetUrl() and passing the variable url through it.
    //console.log(noProto);
  var monthNames = [ // Define an array of the months to convert JS # value of month into short text version
    'Jan.', 'Feb.', 'Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec.'
  ];
  // Function to set the url of the Google Sheet to use:
  function setSheetUrl(urlString) { // Pass the variable 'urlString' through
    var spreadsheetID = '13cd6P3Ze7bBJugzlQ2Uk2dFWc677wE68ghL94JZcnmI';  // ID of the Google Sheets Spreadsheet
    // Sheet # within the Spreadsheet
    // (Sheet # corresponds to the order of the sheets as they appear in Google--the left-most sheet being # '1')
    var sheetNumber; // Defined as an empty variable
    // Set the sheet # based on which page the user is on:
    if ( noProto.indexOf('/baseball') > -1 ) {
      sheetNumber = 1;  // If on Baseball Schedule page set to '1'
    } else if ( noProto.indexOf('/mens-basketball') > -1 ) {
      sheetNumber = 2;  // If on Men's Basketball Schedule page set to '2'
    } else if ( noProto.indexOf('/soccer') > -1 ) {
      sheetNumber = 3;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/womens-basketball') > -1 ) {
      sheetNumber = 4;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/softball') > -1 ) {
      sheetNumber = 5;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/volleyball') > -1 ) {
      sheetNumber = 6;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto == 'athletics.kcc.edu/' || noProto == 'localhost:3000/' ) {
      sheetNumber = 7;
    }
    // Make sure the Google Sheet is public or set to Anyone with link can view
    // Go to File > Publish
    urlString = 'https://spreadsheets.google.com/feeds/list/' + spreadsheetID + '/' + sheetNumber + '/public/values?alt=json'; // build the url
    return urlString; // Kick-out the urlString variable as the URL to the appropriate Sheet.
  }
  //console.log(url);
  // Function to build-out the 'Upcoming Games' slider:
  function sliderSchedule() {
    $.getJSON(url, function(data) {  // make JSON call to Google Data API
      var html = '';  // set html variable as empty string:
      html += '<div class="schedule-slider">'; // Add the start to the slider's outermost div to the 'html' variable
      // loop to build html output for each row
      var entry = data.feed.entry;  // Define 'entry' var from Google Sheet
      var games = []; // Degine 'games' var as an empty array
      // run a forEach() loop on the entries...
      entry.forEach(function(entry) { // ...go determine if the game has happened already:
        var gameDate = entry['gsx$start']['$t'], // Define 'gameDate' as the dates in the 'start' column
          d = new Date(), // Get the current Date/Time
          gd = new Date(gameDate), // Make a new JS Date object from those dates in the 'start' column
          time = entry['gsx$time']['$t'],
          gameTime;
        if ( time !== 'TBA' || time !== undefined || time !== null || time !== '' || time !== ' ' ) {
          gameTime = time;
        } else {
          gameTime = 'TBA';
        }
        var tzh;
        if ( gameTime.indexOf('PM') > -1 ) {
          tzh = 12;
        } else if ( gameTime == 'TBA' ) {
          tzh = '';
        } else {
          tzh = 0;
        }
        if ( gameTime !== 'TBA' ) {
          var noAmPm = gameTime.replace(' PM', '').replace(' AM', '');
          var splitTime = noAmPm.split(':');
          var hh;
          var mm;
          var tz = entry['gsx$timezone']['$t'];
          for ( var i=0; i<splitTime.length; i++ ) {
            hh = splitTime[0]*1+tzh;
            mm = splitTime[1];
          }
          var hours;
          if ( tz !== null || tz !== ' ' || tz !== undefined || tz !== '' || tz == 'CST' ) {
            hours = hh + 6;
          } else if ( tz == 'EST' ) {
            hours = hh + 5;
          }
          gd.setHours(hours - 1);
          gd.setMinutes(mm - 1);
        }
        var dt = d.getTime(), // define 'dt' as the current date/time in the JS getTime() format
          gdt = gd.getTime(); // define 'gdt' as the games date in the 'start' column in the JS getTime() format
        entry['dateString'] = gdt;
        if ( gdt > dt ) { // If the games date is greater than today (i.e. If the games hasn't happened yet)
          games.push(entry); // Push those entry's dates into the 'games' array
        }
        return games; // Return the 'games' array out of the sliderSchedule() function
      }); // We now have all the games that haven't happened yet.
      function compare(a,b) {
        if (a.dateString < b.dateString)
          return -1;
        if (a.dateString > b.dateString)
          return 1;
        return 0;
      }
      games.sort(compare);
      //console.log(games);
      // Run a 'forEach()' loop on the 'games' array created above:
      games.forEach(function(entry) {
        // Function to set the background color for the first column in the table...
        function setColor(colorCode) { // Home games get a red background and away games get a blue background
          var red = '#c61f48',  // Define 'red' as the KCC Primary Red...
            blue = '#0f3b63';  // and 'blue' as the KCC Primary Blue hex-code.
          if ( entry['gsx$where']['$t'] == 'Home' ) {  // If the game location ('where' column) is @ Home:
            colorCode = red;  // Set the color to primary red
          } else {  // If not, then:
            colorCode = blue;  // Set the color to primary blue
          }
          return colorCode; // Return the colorCodes for the games out of the setColor function
        }
        var color = setColor(entry); // Define 'color' as passing 'entry' through the setColor() function
        // Function to add an ending date if there is one:
        function checkEndDate(endDateValue) {
          endDateValue = entry['gsx$end']['$t']; // Define the var 'endDate' as the data in the 'end' column of the Google Sheet
          if ( endDateValue !== '' ) {  // If an endDate exists (is not a blank cell in the sheet) then do this:
            var d = new Date(endDateValue), // Define 'd' as a new JS date object from the games 'end' column dates
              m = monthNames[d.getMonth()], // Define 'm' as the game end-date's month in short-text form
              day = d.getDate(); // Define day as the date for the games in the 'end' column
            endDateValue = '<span class="schedule-slider__dash d-block">&nbsp;-&nbsp;</span>' + '<span class="schedule-slider__m2 d-block">' + m + '</span><span class="schedule-slider__day2 d-block">' + day + '</span>';  // Redefine 'endDate' as the html for adding in the end-date
          }
          return endDateValue; // Return the 'end' column dates out of the checkEndDate() function
        }
        var endDate = checkEndDate(entry); // Defin 'endDate' as passing 'entry' through the checkEndDate() function
        // Function to check for a timezone and add the html for it if there is one other than 'CST':
        function checkForTimezone(timeZone) {
          timeZone = entry['gsx$timezone']['$t'];  // Define the var 'timeZone' as the data in the 'timezone' column of the Google Sheet
          if ( timeZone == '' || timeZone == 'CST' ) {  // If the timezone is empty or equal to 'CST' then do:
            timeZone = '';  // Set timezone as nothing
          } else {  // For everything else, do:
            timeZone = ' (' + timeZone + ')';  // Set timezone as the timezone value surrounded by brackets.
          }
          return timeZone; // Return the timezones out of the checkEndDate() function
        }
        var timeZone = checkForTimezone(entry); // Define 'timeZone' as 'entry' passed-through the checkForTimezone() function
        // Function to build the html for the individual div elements for each game:
        function buildSliderDivs() {
          var startDate = entry['gsx$start']['$t']; // 'startDate' = start column
          var sport = entry['gsx$sport']['$t'];
          var d = new Date(startDate), // Make a new JS Date from the start column dates
            m = monthNames[d.getMonth()], // Make 'm' the month in shor-text form
            day = d.getDate(); // Make 'day' the games Date
          if ( day <= 9 ) { // If the Date is more than a single digit (i.e. 0-9)
            day = '0' + day; // Preceed it with a zero (0)
          }
          // Build-out internall parts of each slider slide:
          html += '<div><div class="row schedule-slider__row">';  // Begin a the slider div
          html += '<div class="schedule-slider__l text-center col-2" style="background-color:' + color + '">'; // Start the left-side of the slider w/ the appropriate background-color
          html += '<span class="schedule-slider__m d-block">' + m + '</span><span class="schedule-slider__day d-block">' + day + '</span>' + endDate; // Date column w/ end-date added if it exists.
          html += '</div><div class="schedule-slider__r col-10">'; // Close left-side and start the right portion of the slider-slide
          html += '<div class="schedule-slider__sport--wrapper"><span class="schedule-slider__sport d-block">' + sport + '</span></div>'; // Label it w/ the sport name
          html += '<span class="schedule-slider__opponent d-block">vs. ' + entry['gsx$opponent']['$t'] + '</span>';  // Opponent Column
          html += '<span class="schedule-slider__where d-block">' + entry['gsx$where']['$t'] + '</span>';  // Where Column
          html += '<span class="schedule-slider__time d-block">' + entry['gsx$time']['$t'] + timeZone + '</span>';  // Time  Column: If there is a timezone other than CST add the timezone in parenthesis
          html += '</div></div></div>'; // End divs
        }
        buildSliderDivs();
      });  // End of forEach loop
      html += '</div>'; // Tack-on the closing div tag for the slider's wrapper
      // output the html
      $('#scheduleDiv').html(html);  // Inject the var 'html' into div w/ id="theTable".  (Var 'html' = string of text that makes up the table markup)
      deferSlick.resolve(); // Resolve the deferSlick deferrement
    });
  }
  // Function that initiates the Slick Slider only after its html content has been generated from the Google Sheet
  $.when(deferSlick).done(function() {
    initSliderSchedule();
  });
  // Unleash Slick Slider
  function initSliderSchedule() {
    $('.schedule-slider').slick({
      dots: false, // No dots bellow the slider
      infinite: false, // No infinite scrolling of slides
      autoplay: false, // No autoplaying the slides
      slidesToShow: 3, // 3 visible
      slidesToScroll: 1, // scroll one at a time
      adaptiveHeight: false,
      prevArrow:'<img class="a-left control-c prev slick-prev" src="../assets/img/blue-prev.svg">',
      nextArrow:'<img class="a-right control-c next slick-next" src="../assets/img/blue-next.svg">',
      responsive: [
        {
          breakpoint: 1024,
          settings: {
            slidesToShow: 3,
            slidesToScroll: 3
          }
        },
        {
          breakpoint: 992,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1
          }
        },
      ]
    });
  }
  //  A function that fires the spreadsheetTable() function IF the user is on a schedule page and fires the sliderSchedule() function if the user is on a sport's landing page:
  function checkPageLocation() {
    var h = 'athletics.kcc.edu/', // Set h as the domain of the site
      lh = 'localhost:3000/'; // Set lh as the local domain of the site is when in dev.
    if ( noProto.indexOf( lh + 'mens-basketball' ) > -1 || noProto.indexOf( h + 'mens-basketball' ) > -1 ) {
      sliderSchedule();
    } else if ( noProto.indexOf( lh + 'baseball' ) > -1 || noProto.indexOf( h + 'baseball' ) > -1 ) {
      sliderSchedule();
    } else if ( noProto.indexOf( lh + 'womens-basketball' ) > -1 || noProto.indexOf( h + 'womens-basketball' ) > -1 ) {
      sliderSchedule();
    } else if ( noProto.indexOf( lh + 'softball' ) > -1 || noProto.indexOf( h + 'softball' ) > -1 ) {
      sliderSchedule();
    } else if ( noProto.indexOf( lh + 'soccer' ) > -1 || noProto.indexOf( h + 'soccer' ) > -1 ) {
      sliderSchedule();
    } else if ( noProto.indexOf( lh + 'volleyball' ) > -1 || noProto.indexOf( h + 'volleyball' ) > -1 ) {
      sliderSchedule();
    } else if ( noProto == h || noProto == lh ) {
      sliderSchedule();
    }
  }
  checkPageLocation();  // Fire the nuclear missiles!

});

var spData = null; // Set to null in-case the data is not there
function doData(json) { // There's a callback on this function ( 'https://...&callback=doData' ) the end of the spreadsheet URL inside a script tag in the page
  spData = json.feed.entry; // Set it to the json feed of the sheet
}

function drawCell(tr, val) {
  var td = document.createElement('td'); // Create an empty <td></td> element
  tr.append(td);
  td.append(val);
  return td;
}
function drawTh(tr, val) {
  var th = document.createElement('th'); // Create an empty <td></td> element
  tr.append(th);
  th.append(val);
  return th;
}
function drawHeadRow(thead, rowData) {
  if (rowData == null) return null;
  if (rowData.length == 0) return null;
  var tr = document.createElement('tr');
  thead.append(tr);
  for(var c=0; c<rowData.length; c++) {
    drawTh(tr, rowData[c]);
  }
  return tr;
}
function drawBodyRow(tbody, rowData) {
  if (rowData == null) return null;
  if (rowData.length == 0) return null;
  var tr = document.createElement('tr');
  tbody.append(tr);
  for(var c=0; c<rowData.length; c++) {
    drawCell(tr, rowData[c]);
  }
  return tr;
}
function drawTable(parent) {
  var table = document.createElement('table');
  table.classList.add('display', 'responsive', 'table', 'table-striped', 'table-hover');
  table.setAttribute('id', 'responsiveTable');
  table.setAttribute('width', '100%');
  parent.append(table);
  return table;
}
function drawHead(table) {
  var thead = document.createElement('thead');
  table.append(thead);
  return thead;
}
function drawBody(table) {
  var tbody = document.createElement('tbody');
  table.append(tbody);
  return tbody;
}

function readData(parent) {
  var data = spData;
  var table = drawTable(parent);
  var thead = drawHead(table);
  var tbody = drawBody(table);
  var rowData = [];

  for(var r=0; r<data.length; r++) {
    var cell = data[r]["gs$cell"];
    var val = cell["$t"];
    var a = document.createElement('a');
    var modalHref;
    if ( val == '#NA!' ) {
      val = ' ';
    }
    if ( cell.col == 3 && val !== 'Player' ) {
      modalHref = '#' + val.replace(/[\W_]+/g, '');
      a.setAttribute('href', modalHref);
      a.setAttribute('data-toggle', 'modal');
      a.append(val);
      rowData.push(a);
    }
    if ( cell.row == 2 ) {
      if ( cell.col == 1 ) {
        drawHeadRow(thead, rowData);
        rowData = [];
      }
    } else {
      if ( cell.col == 1 ) {
        drawBodyRow(tbody, rowData);
        rowData = [];
      }
    }
    if ( cell.col != 3 ) {
      rowData.push(val);
    }
    if ( cell.row == 1 && cell.col == 3 ) {
      rowData.push(val);
    }
  }
  drawBodyRow(tbody, rowData);
}


document.addEventListener('DOMContentLoaded', function() {
  //var deferDataTables = $.Deferred();
  function fun() {
    readData(document.getElementById('data'));
    var th = document.querySelectorAll('th');
    th.forEach(function(element) {
      if ( element.innerHTML == 'Jersey' || element.innerHTML == 'Player' || element.innerHTML == 'Position' ) {
        element.classList.add('all');
      } else if ( element.innerHTML == 'Class' ) {
        element.classList.add('min-tablet-l');
      } else if ( element.innerHTML == 'Hometown' || element.innerHTML == 'High School' || element.innerHTML == 'Height' || element.innerHTML == 'Weight' ) {
        element.classList.add('desktop');
      } else if ( element.innerHTML == 'High School Coach' || element.innerHTML == 'Parents' || element.innerHTML == 'Siblings' || element.innerHTML == 'Intended Major' || element.innerHTML == 'Bio' ) {
        element.classList.add('none');
      }
    });
    function dataTablesGo() {
      var deferSearch = $.Deferred();
      $.when(deferSearch).done(function() {
        $('input[type="search"].form-control').attr('placeholder', 'Search Roster...');
      });
      function addData() {
        $('#responsiveTable').DataTable( {
          responsive: true, // Activate responsive powers GO!
          paging: false, // Don't paginate. Schedule schould all be on one page
          'order': [], // Initial column ordering
          'columnDefs': [
            { 'visible': false, 'targets': 0 }
          ]
        } );
        deferSearch.resolve();
      }
      addData();
    }
    dataTablesGo();
  }
  function toRosterOrNotToRosterThatIsTheQuestion() {
    var currentUrl = window.location.href,  // Defin currentUrl as the user's current browser URL
      noProto = currentUrl.replace(/(^\w+:|^)\/\//, '');  // Remove the http(s):// protocol from that URL
    if ( noProto.indexOf('/roster') > -1 ) {
      fun();
    }
  }
  toRosterOrNotToRosterThatIsTheQuestion();
});

document.addEventListener('DOMContentLoaded', function() {
  var deferLazyLoad = $.Deferred();
  var currentUrl = window.location.href,  // Defin currentUrl as the user's current browser URL
    noProto = currentUrl.replace(/(^\w+:|^)\/\//, ''),  // Remove the http(s):// protocol from that URL
    url = setSheetUrl(url);  // Define the variable url as: the function setSheetUrl() and passing the variable url through it.

  $.when(deferLazyLoad).done(function() {
    lzFunction();
  });

  function setSheetUrl(urlString) { // Pass the variable 'urlString' through
    var spreadsheetID = '14pczY6IjNEy3zdqyNRhCZFLfWLEP4Uv3EGwIp7uXrLo';  // ID of the Google Sheets Spreadsheet
    // Sheet # within the Spreadsheet
    // (Sheet # corresponds to the order of the sheets as they appear in Google--the left-most sheet being # '1')
    var sheetNumber; // Defined as an empty variable
    // Set the sheet # based on which page the user is on:
    if ( noProto.indexOf('/baseball') > -1 ) {
      sheetNumber = 1;  // If on Baseball Schedule page set to '1'
    } else if ( noProto.indexOf('/mens-basketball') > -1 ) {
      sheetNumber = 2;  // If on Men's Basketball Schedule page set to '2'
    } else if ( noProto.indexOf('/soccer') > -1 ) {
      sheetNumber = 3;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/womens-basketball') > -1 ) {
      sheetNumber = 4;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/softball') > -1 ) {
      sheetNumber = 5;  // If on Women's Basketball Schedule page set to '3'
    } else if ( noProto.indexOf('/volleyball') > -1 ) {
      sheetNumber = 6;  // If on Women's Basketball Schedule page set to '3'
    }
    // Make sure the Google Sheet is public or set to Anyone with link can view
    // Go to File > Publish
    urlString = 'https://spreadsheets.google.com/feeds/list/' + spreadsheetID + '/' + sheetNumber + '/public/values?alt=json'; // build the url
    return urlString; // Kick-out the urlString variable as the URL to the appropriate Sheet.
  }

  function drawModals() {
    $.getJSON(url, function(data) {  // make JSON call to Google Data API
      var html = '';  // set html variable as empty string:
      // loop to build html output for each row (build the data into the table)
      var entry = data.feed.entry;  // Define 'entry' var from Google Sheet
      entry.forEach(function(entry) { // Run a 'forEach()' loop on the entrys:
        var playerName = entry['gsx$player']['$t'],
          playerId = playerName.replace(/[\W_]+/g, '');
        var playerWeight,
          playerHeight;
        var weightCell = entry['gsx$weight'],
          heightCell = entry['gsx$height'];
        if ( weightCell !== undefined ) {
          playerWeight = '<span><strong>WEIGHT: </strong>' + entry['gsx$weight']['$t'] + '</span><br>';
        } else {
          playerWeight = '';
        }
        if ( heightCell !== undefined ) {
          playerHeight = '<span><strong>HEIGHT: </strong>' + entry['gsx$height']['$t'] + '</span><br>';
        } else {
          playerHeight = '';
        }
        function drawModalHead() {
          html += '<div class="modal fade" id="' + playerId + '" tabindex="-1" role="dialog" aria-labelledby="' + playerId + 'Bio" aria-hidden="true">';
          html += '<div class="modal-dialog modal-dialog-centered" role="document"><div class="modal-content"><div class="modal-header">';
          html += '<h5 class="modal-title" id="' + playerId + 'Bio">' + playerName + ' Bio' + '</h5>';
          html += '<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>';
        }
        function drawModalBody() {
          var jerseyHTML,
            num = entry['gsx$jersey']['$t'];
          if ( num !== ' ' ) {
            jerseyHTML = '#' + num;
          } else {
            jerseyHTML = '';
          }
          html += '<div class="modal-body"><div class="text-center float-md-left"><img class="roster__img" alt="Photo of player ' + playerName + '" src="../../assets/img/placeholder.png" data-src="../../uploads/roster-img/' + entry['gsx$image']['$t'] + '.jpg"></div>';
          html += '<h6 class="roster__player">' + jerseyHTML + ' ' + playerName + '</h6>';
          html += '<p><span><strong>POSITION: </strong>' + entry['gsx$position']['$t'] + '</span><br><span><strong>CLASS: </strong>' + entry['gsx$class']['$t'] + '</span><br>' + playerWeight + playerWeight + '<strong>HOMETOWN: </strong>' + entry['gsx$hometown']['$t'] + '</span><br><span><strong>HIGH SCHOOL: </strong>' + entry['gsx$highschool']['$t'] + '</span></p></div>';
        }
        function drawModalFooter() {
          html += '<div class="modal-footer"><button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button></div></div></div></div>';
        }
        drawModalHead();
        drawModalBody();
        drawModalFooter();
      });  // End of forEach loop
      // Tack on the closing table tags
      // output the html:
      var modalDiv = document.getElementById('modalDiv');
      modalDiv.innerHTML = html;
      deferLazyLoad.resolve();
    });
  }
  function toRosterModalOrNotToRosterModalThatIsTheQuestion() {
    if ( noProto.indexOf('/roster') > -1 ) {
      drawModals();
    }
  }
  toRosterModalOrNotToRosterModalThatIsTheQuestion();
});
